// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
// License for the specific language governing permissions and limitations under
// the License.

// Plaso (go/plaso) is a forensic analysis tool developed by the incident
// response team in Google. Plaso generates a super-timeline which is a
// timestamped sequence of events that occurred on a forensic artifact. A
// super-timeline has a linear structure because events are ordered in time.
// Non-temporal relationships, such as connections between events that modify
// the same files, or all events generated by starting an application, are not
// explicit in the super-timeline and must be discovered by the analyst.
//
// An event graph is a graph that makes explicit the relationship between events
// and resources that an event accesses, such as files, URLs and IP addresses.
// This file defines the PlasoEventGraph class, which provides functions for
// constructing an event graph from Plaso data.
#ifndef LOGLE_PLASO_EVENT_GRAPH_H_
#define LOGLE_PLASO_EVENT_GRAPH_H_

#include <cstdint>
#include <set>
#include <vector>

#include "json/json.h"
#include "ast.pb.h"
#include "base/string.h"
#include "graph/graph_interface.h"
#include "graph/labeled_graph.h"
#include "plaso_event.pb.h"
#include "util/status.h"

namespace morphie {

// An event graph (lower case refers to the concept, not its implementation) is
// a graph with labelled nodes and edges. The types of node and edge labels are
// defined below, using the convention "name : Type". See ast.proto for a
// definition of the type system. If a node label is marked as unique, only one
// node in the graph can have that label.
// * The node types are:
//   - (Unique) Filename : list(FilenamePart: string)
//   - (Unique) URL : string
//   - (Unique) IP Address : string
//   - Event : tuple(Timestamp : timestamp, EventType: string)
// * The edge types are:
//   - (Unique) Precedes : null
//   - (Unique) Uses : null
//
// A filename is represented as a list of strings with every element of the list
// representing the name of one sub-directory on the path. An edge label either
// a 'Precedes' tag or a 'Uses' tag.
class PlasoEventGraph : public GraphInterface {
 public:
  PlasoEventGraph(bool has_all_sources)
      : is_initialized_(false),
        has_temporal_edges_(false),
        has_all_sources_(has_all_sources) {}

  // Initialize the graph. This function must be called before all other
  // functions in this class. Returns
  // - Status::OK - if a graph with the appropriate node and edge types has
  //   been created.
  // - Status::INTERNAL - otherwise, with the reason accessible via the
  //   Status::error_message() function of the Status object.
  util::Status Initialize();

  // Functions for statistics about nodes and edges.
  // Statistics about nodes.
  int NumNodes() const;
  int NumLabeledNodes(const TaggedAST& label) const;
  // Statistics about edges.
  int NumEdges() const;
  int NumLabeledEdges(const TaggedAST& label) const;
  // Return graph statistics as a string.
  string GetStats() const;

  // Adds nodes and edges to the event graph using data from a PlasoEvent proto.
  void ProcessEvent(const PlasoEvent& event_data);

  // Adds an edge to the graph from each event 'e' to every event 'f' that
  // occurs after 'e' such that no events occurring between 'e' and 'f'. This
  // function can be called at most once and will crash if called multiple
  // times. No events can be added to the graph after this function is called.
  // See the implementation notes for a discussion on why this is the case.
  //
  // Example. Suppose the following four events with the timestamps (hh:mm:ss)
  // shown have been added to the graph.
  //   e1: 10:21:33, e2: 11:45:12, e3: 11:45:12, e4: 11:47:33
  // AddTemporalEdges will add the edges below to the graph.
  //   { (e1, e2), (e1, e3), (e2, e4), (e3, e4)}
  // There no edge (e1, e4) because there are events that occur after 'e1' but
  // before 'e4'.
  void AddTemporalEdges();

  // Returns a representation of the graph in Graphviz DOT format.
  string ToDot() const;

  // Returns a human-readable, protobuf representation of the graph.
  string ToPbTxt() const;

 private:
  // Adds 'file' as a node to the graph if it does not already exist. If
  // 'is_source' is true, adds an edge from the file to the event at 'node_id',
  // and otherwise, adds an edge from the file to that event.
  void AddFile(NodeId node_id, const File& file, bool is_source);

  // Every entity that is not a file or an event is a resource.  Adds a node to
  // the graph with the provided tag and label 'resource' if such a node does
  // not already exist. If 'is_source' is true, adds an edge from the resource
  // to the event at 'node_id', and otherwise, adds an edge from that event to
  // the resource.
  void AddResource(NodeId node_id, const string& tag, const string& resource,
                   bool is_source);

  // Adds nodes and edges for the files and resources involved in an event.
  void AddEventData(NodeId node_id, const PlasoEvent& event_data);

  // Returns an event label with the timestamp and source ASTs set to the
  // arguments provided.
  TaggedAST MakeEventLabel(const AST& timestamp, const AST& source);

  bool is_initialized_;
  // True if temporal edges have been added to 'graph_'.
  bool has_temporal_edges_;
  // True if all event sources are included in the graph.
  bool has_all_sources_;

  LabeledGraph graph_;
  // Maps from a timestamp to the set of event nodes with that timestamp. This
  // index allows for conveniently processing events in chronological order.
  std::map<int64_t, std::set<NodeId>> time_index_;
};

}  // namespace morphie

#endif  // LOGLE_PLASO_EVENT_GRAPH_H_
