syntax = "proto3";

package graph_explorer;

// GraphExplorer is a tool for interactive visualization of graphs with
// hierarchical structure, rich node and edge labels, and with metadata
// associated with nodes and edges. The structure of the Graph proto in this
// file is inspired by the design of the GraphViz DOT language. It allows for
// specification of various properties of nodes and edges in a graph. In
// addition, a Graph proto includes information about hierarchical structure
// that will be used by the visualizer.
//
// The EBNF grammar below provides an overview of the contents of the proto.
// This grammar is only intended to provide a succinct overview. For details,
// consult the proto definition. All features in the grammar have not been
// implemented in the proto or the visualizer yet.
//
//  graph ::= graph_attribute* node*
//  node  ::= node_id node_attribute* edge*
//  edge  ::= node_id edge_attribute*
//  node_id ::= string
//
// Graph, edge and node attributes are of two types. A Boolean attribute
// indicates if a graph entity has a property (such as whether an edge is
// directed). Valued attributes have a name and a value. Both attributes are
// currently represented as key-value pairs. A Boolean attribute is a key that
// starts with 'is' and the value of that attribute is true if it is present in
// the map. The value of a Boolean key is ignored. The list of supported
// attributes for each graph entity is given within the message defining that
// entity.

// An Edge message (with a capital 'E') consists of the source node of the edge
// and the attributes of that edge. There is no target node in an edge
// definition because graphs are represented as adjacency lists.
message Edge {
  // The identifier of the source node.
  string input = 1;

  // * Supported attributes:
  // label - a plain text or HTML edge label.
  // color - the HTML color of the edge (hex strings are supported).
  //
  // Attributes that are being added (these can be included in the proto and
  // will be accepted by the visualizer but currently do not affect the output.)
  //
  // width - integer edge width in pixels.
  // style - the edge style as an SVG stroke-dasharray. A stroke-dasharray is a
  //         comma separated list of SVG length and percentage values that
  //         specifies the lengths of dashes and gaps in the line. For example a
  //         48 pixel edge with the style "5, 5, 1, 5" will look like
  //          "_ . _ . _ ."
  //         and consists a repeating sequence of a 5 pixel dash, 5 pixel space,
  //         1 pixel dash and 5 pixel space.
  // isDirected - asserts that the edge has a head and a tail end.
  map<string, string> edge_attr = 2;
}

// There are two types of nodes. A 'node' or 'leaf node' is a node in the
// standard sense: it may have a label and attributes but does not have
// additional graph structure. A metanode is a collection of nodes or metanodes.
// The metanode containment relationship must be acyclic, meaning that if a
// metanode 'A' contains the metanode 'B', then 'B' cannot contain 'A'.
message Node {
  // The identifier of a node, including the namespace hierarchy. The hierarchy
  // consists of a series of nodes separated by '/'. ('1/2/3' defines a node of
  // id '3' in subgroups of 'node 1'/'node 2'). The identifier uniquely
  // identifies the node in the graph. In general, an identifier is not a label,
  // but if no label is present, the identifier will be displayed.
  string name = 1;

  // For legacy reasons there must be an attribute present named "op".
  //
  // * Supported attributes of all nodes:
  // label - a plain text or HTML node label.
  // fillColor - any HTML color, including hex strings.
  //
  // * Supported attributes of metanodes.
  // isMetanode - denotes that this is a metanode.
  // isLabelPersistent - denotes whether the label should be displayed when the
  //   metanode is expanded.
  // orientation - direction in which the subgraph within this node is laid out.
  //   Orientation values are are TB, BT, LR, and RL, representing the
  //   directions Top, Bottom, Left and Right.
  //
  // * Node and Metanode attributes that are not supported yet.
  // summaryLabel - a text label that appears in the details pane.
  // outlineColor - any HTML color, including hex strings.
  // outlineStyle - node outline options. Eg. solid, dashed, dotted, etc.
  // height - in pixels.
  // width - in pixels.
  map<string, string> node_attr = 2;

  // The edges representing inputs into this node.
  repeated Edge edge = 3;
};

message GraphDef {
  // List of nodes and metanodes in the graph. Metanodes do not have to be
  // listed explicitly.
  repeated Node node = 1;
};
