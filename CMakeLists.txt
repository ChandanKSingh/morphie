# Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

# The project "logle" is written in C++.
project(logle CXX C)
cmake_minimum_required(VERSION 2.8.12)

# If certain external dependencies are not found, they will be downloaded and
# installed in same directory as the rest of the build.
set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}")

# Ensure that the proto libraries are installed.
find_package(Protobuf REQUIRED)
if(NOT PROTOBUF_FOUND)
  message(FATAL_ERROR "Please install the protobuf libraries.")
endif()
include_directories(${PROTOBUF_INCLUDE_DIR})

# Ensure that the Boost libraries are installed. In addition to the Boost core
# libraries, the regex library has to be added separately.
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED OFF)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.43.0 COMPONENTS regex)
if(NOT Boost_FOUND)
  message(FATAL_ERROR "Please install the Boost libraries.")
endif()
include_directories(${BOOST_INCLUDE_DIR})

# Compiler flags.
set(cxx_base_flags "-Wall -std=c++11")
set(cxx_no_exception_flags "-fno-exceptions")
set(cxx_exception_flags "-fexceptions")
set(cxx_strict_flags
  "-Wextra -Wno-unused-parameter -Wno-missing-field-initializers")
set(cxx_flags "${cxx_base_flags} ${cxx_no_exception_flags} ${cxx_strict_flags}")
set(CMAKE_CXX_FLAGS "${cxx_flags}")

# Paths to search for logle-internal header files.
include_directories(${logle_SOURCE_DIR})
include_directories(${logle_SOURCE_DIR}/util)
include_directories(${logle_SOURCE_DIR}/graph)
include_directories(${logle_SOURCE_DIR}/analyzers)
include_directories(${logle_SOURCE_DIR}/analyzers/examples)
include_directories(${logle_SOURCE_DIR}/analyzers/plaso)

# Paths to logle internal libraries.
add_subdirectory(util)

# Directory containing locally installed, third-party libraries.
add_subdirectory(third_party)
# Paths to search for third party libraries.
set(jsoncpp_lib_dir ${CMAKE_BINARY_DIR}/jsoncpp-build/src/lib_json)
set(jsoncpp_src_dir ${CMAKE_BINARY_DIR}/jsoncpp-src/include)
find_library(JSONCPP_LIBRARY jsoncpp HINTS ${jsoncpp_lib_dir})
if (NOT JSONCPP_LIBRARY)
  message(FATAL_ERROR "Library JSONCPP not found")
endif()

include_directories(${jsoncpp_src_dir})

set(gflags_lib_dir ${CMAKE_BINARY_DIR}/gflags-build/lib)
set(gflags_src_dir ${CMAKE_BINARY_DIR}/gflags-build/include)
find_library(GFLAGS_LIBRARY gflags_nothreads HINTS ${gflags_lib_dir})
if (NOT GFLAGS_LIBRARY)
  message(FATAL_ERROR "Library GFlags not found")
endif()
include_directories(${gflags_src_dir})

add_library(util_json_reader "util/json_reader.h" "util/json_reader.cc")
target_link_libraries(util_json_reader
	util_logging
	util_status
	${JSONCPP_LIBRARY})

# Output from the build process, including source files generated by the
# protobuf compiler, are stored in the directory CMAKE_CURRENT_BINARY_DIR.
include_directories(${CMAKE_CURRENT_BINARY_DIR})

# Generate code for the abstract syntax tree proto.
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS "graph/ast.proto")
add_library(ast_proto STATIC ${PROTO_SRCS} ${PROTO_HDRS})
target_include_directories(ast_proto PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

add_executable(jsoncpp_build_test "build_test/jsoncpp_build_test.cc")
target_include_directories(jsoncpp_build_test PRIVATE  ${jsoncpp_src_dir})
target_link_libraries(jsoncpp_build_test PRIVATE ${JSONCPP_LIBRARY})

add_executable(gflags_build_test "build_test/gflags_build_test.cc")
target_link_libraries(gflags_build_test ${GFLAGS_LIBRARY})

# Pretty printing of ASTs and purely structural checks.
add_library(ast STATIC "graph/ast.h" "graph/ast.cc")
target_link_libraries(ast
	ast_proto
	util_time_utils
	${PROTOBUF_LIBRARY})

add_executable(ast_build_test "build_test/ast_build_test.cc")
target_link_libraries(ast_build_test
	ast_proto
	${PROTOBUF_LIBRARY})

add_executable(logging_build_test "build_test/logging_build_test.cc")
target_link_libraries(logging_build_test
	util_logging)

# Utilities operating on ASTs representing values.
add_library(value_checker STATIC "graph/value_checker.h" "graph/value_checker.cc")
target_link_libraries(value_checker
 	ast
 	ast_proto
	util_logging
	util_string_utils
	${PROTOBUF_LIBRARY})

add_executable(value_checker_build_test "build_test/value_checker_build_test.cc")
target_link_libraries(value_checker_build_test
	ast_proto
	value_checker)

# Utilities operating on ASTs representing types.
add_library(type_checker STATIC "graph/type_checker.h" "graph/type_checker.cc")
target_link_libraries(type_checker
 	ast
 	ast_proto
	util_logging
	util_string_utils
	util_time_utils
	value_checker)

add_executable(type_checker_build_test "build_test/type_checker_build_test.cc")
target_link_libraries(type_checker_build_test
	ast_proto
	type_checker)

add_library(type STATIC "graph/type.h" "graph/type.cc")
target_link_libraries(type
 	ast
 	ast_proto
	type_checker)

add_executable(type_build_test "build_test/type_build_test.cc")
target_link_libraries(type_build_test
	ast_proto
	type_checker
	type)

add_library(value STATIC "graph/value.h" "graph/value.cc")
target_link_libraries(value
 	ast
 	ast_proto
 	type_checker
	util_logging
	util_time_utils
	value_checker)

add_executable(value_build_test "build_test/value_build_test.cc")
target_link_libraries(value_build_test
	ast_proto
	value_checker
	value)

# The labeled graph library and its utilities.
add_library(labeled_graph STATIC "graph/labeled_graph.h" "graph/labeled_graph.cc")
target_link_libraries(labeled_graph
 	ast_proto
 	type_checker
	util_logging
	util_status
	util_string_utils)

add_executable(labeled_graph_build_test "build_test/labeled_graph_build_test.cc")
target_link_libraries(labeled_graph_build_test
	ast_proto
	labeled_graph
	type)

add_library(morphism STATIC "graph/morphism.h" "graph/morphism.cc")
target_link_libraries(morphism
 	ast_proto
 	labeled_graph
	util_map_utils
	util_status)

add_executable(morphism_build_test "build_test/morphism_build_test.cc")
target_link_libraries(morphism_build_test
	ast_proto
	labeled_graph
	morphism
	type)

add_library(dot_printer STATIC "graph/dot_printer.h" "graph/dot_printer.cc")
target_link_libraries(dot_printer
 	ast
 	type
 	type_checker
	value
	util_logging
	util_status)

add_executable(dot_printer_build_test "build_test/dot_printer_build_test.cc")
target_link_libraries(dot_printer_build_test
	ast_proto
	dot_printer
	labeled_graph
	type)

protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS "graph/graph_explorer.proto")
add_library(graph_explorer_proto STATIC ${PROTO_SRCS} ${PROTO_HDRS})
target_include_directories(graph_explorer_proto PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

add_library(graph_exporter STATIC "graph/graph_exporter.h" "graph/graph_exporter.cc")
target_link_libraries(graph_exporter
 	ast
 	ast_proto
 	graph_explorer_proto
	labeled_graph
	util_string_utils)

add_executable(graph_exporter_build_test "build_test/graph_exporter_build_test.cc")
target_link_libraries(graph_exporter_build_test
	ast_proto
	labeled_graph
	graph_exporter
	type)

add_library(graph_transformer STATIC "graph/graph_transformer.h" "graph/graph_transformer.cc")
target_link_libraries(graph_transformer
 	labeled_graph
 	morphism
 	type
	util_logging
	util_status
	util_string_utils
	value)

add_executable(graph_transformer_build_test "build_test/graph_transformer_build_test.cc")
target_link_libraries(graph_transformer_build_test
	ast_proto
	dot_printer
	graph_transformer
	labeled_graph
	type
	value)

# Different graph-based analyzers.
set(example_dir "${logle_SOURCE_DIR}/analyzers/examples")
set(plaso_dir "${logle_SOURCE_DIR}/analyzers/plaso")
# The account access analyzer example.
add_library(account_access_defs STATIC "${example_dir}/account_access_defs.h" "${example_dir}/account_access_defs.cc")

add_library(account_access_graph STATIC "${example_dir}/account_access_graph.h" "${example_dir}/account_access_graph.cc")
target_link_libraries(account_access_graph
 	account_access_defs
 	dot_printer
 	labeled_graph
 	type
 	type_checker
 	value
	util_logging
	util_status
	util_string_utils)

add_executable(account_access_graph_build_test "build_test/account_access_graph_build_test.cc")
target_link_libraries(account_access_graph_build_test
	account_access_graph)

add_library(account_access_analyzer STATIC "${example_dir}/account_access_analyzer.h" "${example_dir}/account_access_analyzer.cc")
target_link_libraries(account_access_analyzer
 	account_access_defs
 	account_access_graph
	util_csv
	util_logging
	util_status
	util_string_utils)

add_executable(account_access_analyzer_build_test "build_test/account_access_analyzer_build_test.cc")
target_link_libraries(account_access_analyzer_build_test
	account_access_analyzer)

# Curio dependency stream graphs and utilities.
add_library(curio_defs STATIC "${example_dir}/curio_defs.h" "${example_dir}/curio_defs.cc")

add_library(stream_dependency_graph STATIC "${example_dir}/stream_dependency_graph.h" "${example_dir}/stream_dependency_graph.cc")
target_link_libraries(stream_dependency_graph
 	curio_defs
 	dot_printer
 	labeled_graph
 	type
 	type_checker
 	value
	util_logging
	util_status
	util_string_utils)

add_executable(stream_dependency_graph_build_test "build_test/stream_dependency_graph_build_test.cc")
target_link_libraries(stream_dependency_graph_build_test
	stream_dependency_graph)

add_library(curio_analyzer STATIC "${example_dir}/curio_analyzer.h" "${example_dir}/curio_analyzer.cc")
target_include_directories(curio_analyzer PRIVATE ${jsoncpp_src_dir})
target_link_libraries(curio_analyzer
 	stream_dependency_graph
	util_logging
	util_status
	util_string_utils
	${JSONCPP_LIBRARY})

add_executable(curio_analyzer_build_test "build_test/curio_analyzer_build_test.cc")
target_include_directories(curio_analyzer_build_test PRIVATE ${jsoncpp_src_dir})
target_link_libraries(curio_analyzer_build_test
	curio_analyzer
	${JSONCPP_LIBRARY})

# Plaso related graphs and utilities.
add_library(plaso_defs STATIC "${plaso_dir}/plaso_defs.h" "${plaso_dir}/plaso_defs.cc")

protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS "${plaso_dir}/plaso_event.proto")
add_library(plaso_event_proto STATIC ${PROTO_SRCS} ${PROTO_HDRS})
target_include_directories(plaso_event_proto PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

add_library(plaso_event STATIC "${plaso_dir}/plaso_event.h" "${plaso_dir}/plaso_event.cc")
target_include_directories(plaso_event PRIVATE ${jsoncpp_src_dir})
target_link_libraries(plaso_event
 	ast_proto
 	plaso_defs
 	plaso_event_proto
 	type
 	value
	${JSONCPP_LIBRARY}
 	${PROTOBUF_LIBRARY})

add_executable(plaso_event_build_test "build_test/plaso_event_build_test.cc")
target_include_directories(plaso_event_build_test PRIVATE ${jsoncpp_src_dir})
target_link_libraries(plaso_event_build_test
	plaso_event_proto
	plaso_event
	${JSONCPP_LIBRARY})

add_library(plaso_event_graph STATIC "${plaso_dir}/plaso_event_graph.h" "${plaso_dir}/plaso_event_graph.cc")
target_link_libraries(plaso_event_graph
 	ast
 	ast_proto
	dot_printer
 	graph_explorer_proto
        graph_exporter
 	labeled_graph
 	plaso_defs
 	plaso_event
 	plaso_event_proto
 	type
 	type_checker
 	value_checker
	util_logging
	util_status
	util_string_utils
	util_time_utils
	${JSONCPP_LIBRARY}
 	${PROTOBUF_LIBRARY})

add_executable(plaso_event_graph_build_test "build_test/plaso_event_graph_build_test.cc")
target_link_libraries(plaso_event_graph_build_test
	plaso_event_graph)

add_library(plaso_analyzer STATIC "${plaso_dir}/plaso_analyzer.h" "${plaso_dir}/plaso_analyzer.cc")
target_include_directories(plaso_analyzer PRIVATE ${jsoncpp_src_dir})
target_link_libraries(plaso_analyzer
 	util_json_reader
 	plaso_defs
 	plaso_event
 	plaso_event_graph
 	util_status
 	util_string_utils)

add_executable(plaso_analyzer_build_test "build_test/plaso_analyzer_build_test.cc")
target_link_libraries(plaso_analyzer_build_test
	util_json_reader
	plaso_analyzer
	${JSONCPP_LIBRARY})

# The frontend of the tool.
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS analysis_options.proto)
add_library(analysis_options_proto STATIC ${PROTO_SRCS} ${PROTO_HDRS})
target_include_directories(analysis_options_proto PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

add_executable(analysis_options_build_test "build_test/analysis_options_build_test.cc")
target_link_libraries(analysis_options_build_test
	analysis_options_proto
	${PROTOBUF_LIBRARY})

add_library(frontend STATIC frontend.h frontend.cc)
target_include_directories(frontend PRIVATE ${jsoncpp_src_dir})
target_link_libraries(frontend
 	account_access_analyzer
 	analysis_options_proto
 	curio_analyzer
 	util_json_reader
	plaso_analyzer
	util_csv
 	util_string_utils
 	util_status
	${JSONCPP_LIBRARY}
	${PROTOBUF_LIBRARY})

add_executable(morphie logle.cc)
target_include_directories(morphie PRIVATE ${gflags_src_dir})
target_link_libraries(morphie
 	analysis_options_proto
 	frontend
 	util_status
	${GFLAGS_LIBRARY}
 	${PROTOBUF_LIBRARY})
