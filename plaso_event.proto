// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
// License for the specific language governing permissions and limitations under
// the License.

syntax = "proto2";

package logle;

// Plaso (go/plaso) is a forensic analysis tool that extracts timed events from
// forensic artefacts. This file defines the PlasoEvent proto, which stores
// attributes about events. This proto is the main data structure for
// transforming data generated by Plaso into data used by logle for graph
// analysis. The PlasoEvent proto is based on the EventObject message in
// plaso/proto/plaso_storage.proto but reduces the amount of processing required
// to extract data for graph analysis.

// This enum defines a set of event types. The event types are not independent.
// For example a FILE_CONTENT_MODIFIED event is also a FILE_METADATA_MODIFIED
// event but metadata can be modified without content being modified. The event
// types are designed such that there is exactly one type for each event
// generated by Plaso. See plaso_event.cc for a description of when DEFAULT is
// used.
enum EventType {
  SKIP = 1;
  DEFAULT = 2;
  FILE_CREATED = 3;
  FILE_METADATA_MODIFIED = 4;
  FILE_CONTENT_MODIFIED = 5;
  FILE_ACCESSED = 6;
  PAGE_VISITED = 7;
  FILE_DOWNLOADED = 8;
  BROWSER_EXTENSION_INSTALLED = 9;
  APPLICATION_EXECUTED = 10;
}

// A directory is represented by the sequence of subdirectories on a path.
//  Examples 1:
//   - /  is represented by the empty string.
//   - /mnt  is represented by the string "mnt".
//   - /usr/local/bin is represented by the sequence "usr", "local", "bin".
// A path of size zero represents that no directory is known.
message Directory {
  repeated string path = 1;
}

// A file is represented by a filename and the directory containing the file.
// If directory information is not available, the 'directory' field will be
// absent. The same applies to the filename. Empty strings should not be used to
// represent unknown filenames.
//  Examples 2:
//   - abc.txt has no directory and 'filename' as "abc.txt".
//   - /Users/MrWhite/blacklist will have 'filename' as "blacklist" and
//     'directory' as the sequence "Users", "MrWhite".
message File {
  optional Directory directory = 1;
  optional string filename = 2;
}

// A PlasoEvent message consists of data extracted from Plaso output and an
// event type generated by logle. All fields except the event type are optional.
message PlasoEvent {
  // Event timestamp if available.
  optional int64 timestamp = 1;

  required EventType type = 2 [default = DEFAULT];

  // A natural language description that Plaso generates for the event. Example
  // descriptions are "Metadata Modification Time" or "Last Login Time". The set
  // of descriptions is defined in plaso/lib/eventdata.py and output to CSV in
  // the 'timestamp_desc' field.
  optional string desc = 3;

  // The file from which Plaso extracted this event. This file need not be
  // explicitly modified by an event. For example, Plaso uses the Apple System
  // Log to detect if a file was downloaded on a OS X system. In a file download
  // event, the Apple System Log is the event source file, but the result of the
  // download is a different file. In MAC time events, the event data file is
  // the file modified in the event.
  optional File event_source_file = 4;
  optional string event_id = 5;

  // URLs and files in an event can be sources or targets of data or actions.
  // For example, in a file download event, there is a source URL and a target
  // file, while a file upload event has a source file and a target URL.
  optional string source_url = 6;
  optional string target_url = 7;

  optional File source_file = 8;
  optional File target_file = 9;

  // Information about browser extensions.
  optional string extension_name = 10;
  optional string extension_id = 11;

  // The name and version of an application. The version is a string
  // to allow for different represenations of that information.
  optional string application_name = 12;
  optional string application_version = 13;
}
